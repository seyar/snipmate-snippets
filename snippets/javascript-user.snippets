#
# @see https://github.com/vim-scripts/Jasmine-snippets-for-snipMate
#

# Describe
snippet de
	describe('${1:description}', function () {

		${2}

	});
# It
snippet it
	it('${1:description}', function () {
		${2}
	});
	${3}
# After Each
snippet aft
	afterEach(function () {
		${1}
	});

# Before Each
snippet bef
	beforeEach(function () {
		${1}
	});

# Expect not to be defined
snippet notd
	expect(${1:target}).not.toBeDefined();${2}

# Expect not to be falsy
snippet notf
	expect(${1:target}).not.toBeFalsy();${2}

# Expect not to be null
snippet notn
	expect(${1:target}).not.toBeNull();${2}

# Expect to be truthy
snippet nott
	expect(${1:target}).not.toBeTruthy();${2}

# Expect not to contain
snippet notc
	expect(${1:target}).not.toContain(${2:value});${3}

# Expect not to equal
snippet note
	expect(${1:target}).not.toEqual(${2:value});${3}

# Expect not to match
snippet notm
	expect(${1:target}).not.toBeDefined();${2}

# Expect not
snippet notx
	expect(${1:target}).not;${2}

# Expect to be defined
snippet ed
	expect(${1:target}).toBeDefined();${2}

# Expect to be falsy
snippet ef
	expect(${1:target}).toBeFalsy();${2}

# Expect to be null
snippet en
	expect(${1:target}).toBeNull();${2}

# Expect to be truthy
snippet et
	expect(${1:target}).toBeTruthy();${2}

# Expect to contain
snippet ec
	expect(${1:target}).toContain(${2:value});${3}

# Expect to equal
snippet ee
	expect(${1:target}).toEqual(${2:value});${3}

# Expect to match
snippet em
	expect(${1:target}).toMatch(${2:pattern});${3}

# Expect was called with
snippet escw
	expect(${1:target}).wasCalledWith(${2:arguments});${3}

# Expect was called
snippet esc
	expect(${1:target}).wasCalled();${2}

# Expect was not called with
snippet notscw
	expect(${1:target}).wasNotCalledWith(${2:arguments});${3}

# Expect was not called
snippet notsc
	expect(${1:target}).wasNotCalled();${3}

# Expect
snippet ex
	expect(${1:target});${2}

# Runs
snippet ru
	runs(function () {
		${1}
	});${2}

# Spy on and call fake
snippet scf
	spyOn(${1:object}, '${2:method}').andCallFake(${3:function});${4}

# Spy on and call through
snippet sct
	spyOn(${1:object}, '${2:method}').andCallThrough();${3}

# Spy on and return
snippet sr
	spyOn(${1:object}, '${2:method}').andReturn(${3:arguments});${4}

# Spy on and throw
snippet st
	spyOn(${1:object}, '${2:method}').andThrow(${3:exception});${4}

# Spy on
snippet s
	spyOn(${1:object}, '${2:method}');${3}

# Waits
snippet wa
	waits(${1});${2}

# ternar operator
snippet ?
	${1} = (${2:/* condition */}) ? ${3} : ${4}

# .then
snippet .then
	.then(function () {
    		${1}
	})

# function
snippet f
	function (${1:param}) {
    		${2}
	}

# module exports
snippet mod
	module.exports = ${1};
	
# require
snippet re
	var ${1:module} = require('${1:module}');
	
# return
snippet rt
	return ${1}

# switch
snippet sw
	switch (${1}) {
		case ${2}:
    			${4}
    			break;
		case ${3}:
		
# throw error
snippet th
	throw new Error('${1}');
	
# try catch
snippet try
	try {
    		${1}
	} catch (err) {
		
	}
	
# console log
snippet cd
	console.log('${1}::${2}()');
	
# console
snippet cl
	console.log('${1:name}');
	
	
